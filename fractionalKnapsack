#include <stdio.h>

// structure to represent an item in the Knapsack problem
struct Item 
{
    int value;   // value of the item
    int weight;  // weight of the item
};

// function to compare two items based on their value per unit weight
int compare(const void* a, const void* b) {
    double ratio1 = ((struct Item*)a)->value / (double)((struct Item*)a)->weight;
    double ratio2 = ((struct Item*)b)->value / (double)((struct Item*)b)->weight;
    
    if (ratio1 > ratio2) 
    {
        return -1;
    } 
    else if (ratio1 < ratio2) 
    {
        return 1;
    } 
    else 
    {
        return 0;
    }
}

// function to solve the fractional Knapsack problem
double fractionalKnapsack(int m, struct Item items[], int n) {
    // sort the items by their value per unit weight in non-increasing order
    qsort(items, n, sizeof(struct Item), compare);
    
    // initialize the total value and total weight of the Knapsack
    double totalValue = 0.0;
    int totalWeight = 0;
    
    // loop through the sorted items and add them to the Knapsack until it is full
    printf("Item\tValue\tWeight\n");
    for (int i = 0; i < n; i++) {
        if (totalWeight + items[i].weight <= m) {
            totalValue += items[i].value;
            totalWeight += items[i].weight;
            printf("%d\t%d\t%d\n", i+1, items[i].value, items[i].weight);
        } else {
            int remainingWeight = m - totalWeight;
            double fraction = (double)remainingWeight / items[i].weight;
            totalValue += items[i].value * fraction;
            totalWeight += remainingWeight;
            printf("%d\t%d\t%d\t", i+1, items[i].value, items[i].weight);
            break;
        }
    }
    
    // return the total value of the Knapsack
    return totalValue;
}

int main() {
    // create the items array
    struct Item arr[] = {{1, 3}, {5, 2}, {10, 5}, {10, 7}, {5, 2}, {7, 8}, {8, 4}};
    int n = sizeof(arr) / sizeof(arr[0]);
    int m = 15;
    printf("Knapsack Capacity: %d\n", m);
    // solve the fractional Knapsack problem and print the result
    double result = fractionalKnapsack(m, arr, n);
    printf("\nThe optimal solution to the fractional Knapsack problem is %lf.\n", result);
    
    return 0;
}
